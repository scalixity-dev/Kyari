// =======================================
// == ENUMS
// =======================================
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  RECEIVED
  ASSIGNED
  PROCESSING
  FULFILLED
  PARTIALLY_FULFILLED
  CLOSED
  CANCELLED
}

enum OrderSource {
  API
  EXCEL_UPLOAD
  MANUAL_ENTRY
}

enum AssignmentStatus {
  PENDING_CONFIRMATION
  VENDOR_CONFIRMED_FULL
  VENDOR_CONFIRMED_PARTIAL
  VENDOR_DECLINED
  INVOICED
  DISPATCHED
  STORE_RECEIVED
  VERIFIED_OK
  VERIFIED_MISMATCH
  COMPLETED
}

enum PurchaseOrderStatus {
  DRAFT
  ISSUED
  ACCEPTED
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum InvoiceStatus {
  PENDING_VERIFICATION
  APPROVED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DispatchStatus {
  PENDING
  PROCESSING
  DISPATCHED
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum GRNStatus {
  PENDING_VERIFICATION
  VERIFIED_OK
  VERIFIED_MISMATCH
  PARTIALLY_VERIFIED
}

enum GRNItemStatus {
  VERIFIED_OK
  QUANTITY_MISMATCH
  DAMAGE_REPORTED
  SHORTAGE_REPORTED
  EXCESS_RECEIVED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  URGENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  EXPIRED
}

enum DeviceType {
  WEB
  IOS
  ANDROID
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================
// == 1. AUTH & USER MANAGEMENT 
// =======================================

model User {
  id              String         @id @default(cuid())
  email           String?        @unique @db.VarChar(255)
  name            String         @db.VarChar(255)
  passwordHash    String
  passwordVersion Int            @default(1)
  status          UserStatus     @default(PENDING)
  lastLoginAt     DateTime?
  metadata        Json?
  createdBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
  roles           UserRole[]
  vendorProfile   VendorProfile?
  refreshTokens   RefreshToken[]
  auditLogs       AuditLog[]      @relation("ActorUser")
  assignedTickets Ticket[]        @relation("AssignedToUser")
  createdTickets  Ticket[]        @relation("CreatedByUser")
  ticketComments  TicketComment[]
  createdOrders   Order[]         @relation("CreatedByAdmin")
  assignedItems   AssignedOrderItem[] @relation("AssignedByAdmin")
  verifiedGRNs    GoodsReceiptNote[] @relation("VerifiedByUser")
  createdPOs      PurchaseOrder[] @relation("CreatedByAccountsUser")
  processedPayments Payment[]       @relation("ProcessedByUser")
  
  // Notification relations
  deviceTokens    DeviceToken[]
  notificationLogs NotificationLog[]
  
  // Chat relations
  sentTicketMessages TicketChat[] @relation("SentTicketMessages")
  
  @@index([email])
  @@index([status])
  @@map("users")
}

// ... (Other auth models like Role, Permission, etc. remain unchanged)
model Role {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(50)
  description String?
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("roles")
}
model UserRole {
  userId     String
  roleId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?
  @@id([userId, roleId])
  @@map("user_roles")
}
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String?
  resource    String   @db.VarChar(50)
  action      String   @db.VarChar(50)
  roles       RolePermission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("permissions")
}
model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())
  @@id([roleId, permissionId])
  @@map("role_permissions")
}
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique
  family    String   @db.VarChar(100)
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?
  ipAddress String?  @db.VarChar(50)
  userAgent String?  @db.Text
  @@index([userId])
  @@index([tokenHash])
  @@index([family])
  @@map("refresh_tokens")
}
model PasswordResetCode {
  id        String   @id @default(cuid())
  email     String   @db.VarChar(255)
  code      String   @db.VarChar(6)
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?  @db.VarChar(50)
  userAgent String?  @db.Text
  createdAt DateTime @default(now())
  @@index([email])
  @@index([code])
  @@index([expiresAt])
  @@map("password_reset_codes")
}

// =======================================
// == NOTIFICATION MODELS
// =======================================

model DeviceToken {
  id         String    @id @default(cuid())
  token      String    @unique @db.VarChar(500)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceType DeviceType @default(WEB)
  isActive   Boolean   @default(true)
  expiresAt  DateTime  @default(dbgenerated("NOW() + INTERVAL '30 days'"))
  lastUsed   DateTime  @default(now())
  metadata   Json?     // Device info, browser, OS, etc.
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("device_tokens")
}

model NotificationLog {
  id               String             @id @default(cuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  title            String             @db.VarChar(255)
  body             String             @db.Text
  priority         NotificationPriority @default(NORMAL)
  status           NotificationStatus @default(PENDING)
  deviceTokenCount Int                @default(0) // Number of tokens targeted
  sentCount        Int                @default(0) // Successfully sent
  deliveredCount   Int                @default(0) // Delivered confirmation
  failedCount      Int                @default(0) // Failed attempts
  retryCount       Int                @default(0) // Retry attempts
  metadata         Json?              // Deep linking, custom data, error details
  scheduledAt      DateTime?          // For future scheduled notifications
  sentAt           DateTime?
  lastRetryAt      DateTime?
  expiresAt        DateTime?          // TTL for the notification
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([scheduledAt])
  @@map("notification_logs")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?
  actorUser   User?    @relation("ActorUser", fields: [actorUserId], references: [id], onDelete: SetNull)
  action      String   @db.VarChar(100)
  entityType  String?  @db.VarChar(50)
  entityId    String?  @db.VarChar(100)
  metadata    Json?
  ipAddress   String?  @db.VarChar(50)
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())
  @@index([actorUserId])
  @@index([action])
  @@index([entityType, entityId])
  @@map("audit_logs")
}


// =======================================
// == 2. VENDOR MANAGEMENT
// =======================================

model VendorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName       String   @db.VarChar(255)
  contactPersonName String   @db.VarChar(255)
  contactPhone      String   @unique @db.VarChar(20)
  warehouseLocation String   @db.Text
  pincode           String   @db.VarChar(10)
  gstNumber         String?  @unique @db.VarChar(50)
  panNumber         String?  @unique @db.VarChar(50)
  kycDocuments      Json?
  verified          Boolean  @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?
  fillRate          Float?   @default(0)
  slaComplianceRate Float?   @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  primaryOrders     Order[]             @relation("PrimaryVendorForOrder")
  assignedItems     AssignedOrderItem[]
  purchaseOrders    PurchaseOrder[]
  dispatches        Dispatch[]          @relation("VendorDispatches")
  @@index([contactPhone])
  @@index([gstNumber])
  @@map("vendor_profiles")
}

//=======================================
// == PRODUCT TABLE REMOVED AS REQUESTED
//=======================================


// =======================================
// == 3. CORE ORDER MANAGEMENT
// =======================================

model Order {
  id              String      @id @default(cuid())
  clientOrderId   String      @unique
  orderNumber     String      @unique
  status          OrderStatus @default(RECEIVED)
  source          OrderSource @default(API)
  totalValue      Decimal?    @db.Decimal(12, 2)
  createdById     String?
  createdBy       User?       @relation("CreatedByAdmin", fields: [createdById], references: [id], onDelete: SetNull)
  primaryVendorId String?
  primaryVendor   VendorProfile? @relation("PrimaryVendorForOrder", fields: [primaryVendorId], references: [id], onDelete: Restrict)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deletedAt       DateTime?
  items           OrderItem[]
  @@index([status])
  @@index([createdAt])
  @@index([primaryVendorId])
  @@map("orders")
}

// ===================================
// == MODIFIED OrderItem MODEL
// ===================================
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product details are now stored only here as free text
  productName String  @db.VarChar(255)
  sku         String? @db.VarChar(100)

  // Order details
  quantity      Int
  pricePerUnit  Decimal?  @db.Decimal(10, 2)
  totalPrice    Decimal?  @db.Decimal(12, 2)
  
  // Backorder relationship is maintained
  parentOrderItemId String?
  parentOrderItem   OrderItem?  @relation("BackOrder", fields: [parentOrderItemId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  backOrderItems    OrderItem[] @relation("BackOrder")

  // Relation to the fulfillment process
  assignedItems AssignedOrderItem[]

  @@index([orderId])
  @@map("order_items")
}

model AssignedOrderItem {
  id                  String           @id @default(cuid())
  orderItemId         String
  orderItem           OrderItem        @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  vendorId            String
  vendor              VendorProfile    @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  status              AssignmentStatus @default(PENDING_CONFIRMATION)
  assignedQuantity    Int
  confirmedQuantity   Int?
  vendorRemarks       String?
  assignedById        String
  assignedBy          User             @relation("AssignedByAdmin", fields: [assignedById], references: [id], onDelete: Restrict)
  assignedAt          DateTime         @default(now())
  vendorActionAt      DateTime?
  purchaseOrderItem   PurchaseOrderItem?
  dispatchItems       DispatchItem[]
  goodsReceiptItems   GoodsReceiptItem[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  @@index([orderItemId])
  @@index([vendorId])
  @@index([status])
  @@map("assigned_order_items")
}

// ... (Rest of schema for Finance, Logistics, Tickets, and Enums remains the same)
// =======================================
// == 4. ACCOUNTS & FINANCE
// =======================================
model PurchaseOrder {
  id              String              @id @default(cuid())
  poNumber        String              @unique
  vendorId        String
  vendor          VendorProfile       @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  status          PurchaseOrderStatus @default(DRAFT)
  totalAmount     Decimal             @db.Decimal(12, 2)
  poJson          Json
  notes           String?
  createdById     String
  createdBy       User                @relation("CreatedByAccountsUser", fields: [createdById], references: [id], onDelete: Restrict)
  issuedAt        DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  items           PurchaseOrderItem[]
  vendorInvoice   VendorInvoice?
  payment         Payment?
  @@index([vendorId])
  @@index([status])
  @@map("purchase_orders")
}
model PurchaseOrderItem {
  id                  String            @id @default(cuid())
  purchaseOrderId     String
  purchaseOrder       PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  assignedOrderItemId String            @unique
  assignedOrderItem   AssignedOrderItem @relation(fields: [assignedOrderItemId], references: [id], onDelete: Restrict)
  quantity            Int
  pricePerUnit        Decimal           @db.Decimal(10, 2)
  totalPrice          Decimal           @db.Decimal(12, 2)
  @@index([purchaseOrderId])
  @@map("purchase_order_items")
}
model VendorInvoice {
  id                      String        @id @default(cuid())
  purchaseOrderId         String        @unique
  purchaseOrder           PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Restrict)
  invoiceNumber           String
  invoiceDate             DateTime
  invoiceAmount           Decimal       @db.Decimal(12, 2)
  status                  InvoiceStatus @default(PENDING_VERIFICATION)
  attachmentId            String?       @unique
  attachment              Attachment?   @relation("MainInvoiceAttachment", fields: [attachmentId], references: [id], onDelete: SetNull)
  accountsAttachmentId    String?       @unique
  accountsAttachment      Attachment?   @relation("AccountsInvoiceAttachment", fields: [accountsAttachmentId], references: [id], onDelete: SetNull)
  vendorAttachmentId      String?       @unique
  vendorAttachment        Attachment?   @relation("VendorInvoiceAttachment", fields: [vendorAttachmentId], references: [id], onDelete: SetNull)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  @@index([status])
  @@map("vendor_invoices")
}
model Payment {
  id                String        @id @default(cuid())
  purchaseOrderId   String        @unique
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Restrict)
  amount            Decimal       @db.Decimal(12, 2)
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  transactionId     String?       @unique
  notes             String?
  processedById     String
  processedBy       User          @relation("ProcessedByUser", fields: [processedById], references: [id], onDelete: Restrict)
  processedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  @@index([status])
  @@map("payments")
}
// =======================================
// == 5. LOGISTICS & DISPATCH
// =======================================
model Dispatch {
  id                   String         @id @default(cuid())
  dispatchNumber       String         @unique @default(cuid())
  awbNumber            String
  logisticsPartner     String
  status               DispatchStatus @default(PENDING)
  vendorId             String
  vendor               VendorProfile  @relation("VendorDispatches", fields: [vendorId], references: [id], onDelete: Restrict)
  dispatchDate         DateTime       @default(now())
  estimatedDeliveryDate DateTime?
  remarks              String?        @db.Text
  items                DispatchItem[]
  attachments          Attachment[]   @relation("DispatchAttachments")
  goodsReceiptNote     GoodsReceiptNote?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  @@index([vendorId])
  @@index([awbNumber])
  @@index([status])
  @@map("dispatches")
}
model DispatchItem {
  id                  String            @id @default(cuid())
  dispatchId          String
  dispatch            Dispatch          @relation(fields: [dispatchId], references: [id], onDelete: Cascade)
  assignmentId        String
  assignedOrderItem   AssignedOrderItem @relation(fields: [assignmentId], references: [id], onDelete: Restrict)
  orderItemId         String
  dispatchedQuantity  Int
  goodsReceiptItems   GoodsReceiptItem[] @relation("DispatchItemGRNItems")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  @@index([dispatchId])
  @@index([assignmentId])
  @@map("dispatch_items")
}
model GoodsReceiptNote {
  id                String             @id @default(cuid())
  grnNumber         String             @unique
  dispatchId        String             @unique
  dispatch          Dispatch           @relation(fields: [dispatchId], references: [id], onDelete: Restrict)
  status            GRNStatus          @default(PENDING_VERIFICATION)
  operatorRemarks   String?            @db.Text
  verifiedById      String
  verifiedBy        User               @relation("VerifiedByUser", fields: [verifiedById], references: [id], onDelete: Restrict)
  receivedAt        DateTime
  verifiedAt        DateTime?
  items             GoodsReceiptItem[]
  ticket            Ticket?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  @@index([status])
  @@index([verifiedById])
  @@map("goods_receipt_notes")
}
model GoodsReceiptItem {
  id                  String            @id @default(cuid())
  goodsReceiptNoteId  String
  goodsReceiptNote    GoodsReceiptNote  @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  dispatchItemId      String
  dispatchItem        DispatchItem      @relation("DispatchItemGRNItems", fields: [dispatchItemId], references: [id], onDelete: Restrict)
  assignedOrderItemId String
  assignedOrderItem   AssignedOrderItem @relation(fields: [assignedOrderItemId], references: [id], onDelete: Restrict)
  assignedQuantity    Int
  confirmedQuantity   Int
  receivedQuantity    Int
  discrepancyQuantity Int               @default(0)
  status              GRNItemStatus     @default(VERIFIED_OK)
  itemRemarks         String?           @db.Text
  damageReported      Boolean           @default(false)
  damageDescription   String?           @db.Text
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  @@index([goodsReceiptNoteId])
  @@index([dispatchItemId])
  @@index([assignedOrderItemId])
  @@index([status])
  @@map("goods_receipt_items")
}
// =======================================
// == 6. TICKETING & DISPUTES
// =======================================
model Ticket {
  id                 String         @id @default(cuid())
  ticketNumber       String         @unique
  title              String         @db.VarChar(255)
  description        String         @db.Text
  status             TicketStatus   @default(OPEN)
  priority           TicketPriority @default(MEDIUM)
  goodsReceiptNoteId String?        @unique
  goodsReceiptNote   GoodsReceiptNote? @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: SetNull)
  createdById        String
  createdBy          User           @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: Restrict)
  assigneeId         String?
  assignee           User?          @relation("AssignedToUser", fields: [assigneeId], references: [id], onDelete: SetNull)
  resolvedAt         DateTime?
  lastMessageAt      DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  comments           TicketComment[]
  attachments        Attachment[]
  chats              TicketChat[]
  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@map("tickets")
}

model TicketChat {
  id          String      @id @default(cuid())
  ticketId    String
  senderId    String
  message     String?     @db.Text
  attachments Json?
  messageType MessageType @default(TEXT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  ticket      Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender      User   @relation("SentTicketMessages", fields: [senderId], references: [id], onDelete: Restrict)

  @@index([ticketId, createdAt])
  @@index([senderId])
  @@map("ticket_chats")
}

model TicketComment {
  id        String   @id @default(cuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  @@index([ticketId])
  @@map("ticket_comments")
}
// =======================================
// == 7. UTILITY MODELS
// =======================================
model Attachment {
  id                        String         @id @default(cuid())
  fileName                  String
  originalName              String
  fileType                  String         @db.VarChar(100)
  mimeType                  String         @db.VarChar(100)
  fileSize                  Int
  s3Key                     String         @unique
  s3Url                     String         @unique
  uploadedBy                String?
  ticketId                  String?
  ticket                    Ticket?        @relation(fields: [ticketId], references: [id], onDelete: SetNull)
  dispatchId                String?
  dispatch                  Dispatch?      @relation("DispatchAttachments", fields: [dispatchId], references: [id], onDelete: SetNull)
  mainInvoice               VendorInvoice? @relation("MainInvoiceAttachment")
  accountsInvoice           VendorInvoice? @relation("AccountsInvoiceAttachment")
  vendorInvoice             VendorInvoice? @relation("VendorInvoiceAttachment")
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  @@index([ticketId])
  @@index([dispatchId])
  @@index([uploadedBy])
  @@map("attachments")
}

